name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

permissions:
  contents: read
  security-events: write

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Type check
        run: npm run type-check

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node: ['18', '20', '22']
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        if: matrix.os == 'ubuntu-latest' && matrix.node == '20'
        with:
          files: ./coverage/lcov.info

  security:
    name: Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security tests
        run: npm run test:security

      - name: Run npm audit
        run: npm audit --production

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v4
        with:
          languages: javascript,typescript

      - name: Run Snyk
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  compliance:
    name: Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run compliance tests
        run: npm run test:compliance

      - name: Check licenses
        run: |
          npm install -g license-checker
          license-checker --production --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC'

  build:
    name: Build
    needs: [lint, test, security, compliance]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Test build
        run: |
          node dist/cli/index.js --version
          node dist/mcp/index.js --help || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/

  integration:
    name: Integration Tests
    needs: build
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      falkordb:
        image: falkordb/falkordb:latest
        ports:
          - 6581:6379
        options: >-
          --health-cmd "redis-cli -p 6379 ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Run integration tests
        env:
          FALKORDB_HOST: localhost
          FALKORDB_PORT: 6581
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: npm run test:integration

      - name: Test graph backend connection
        env:
          FALKORDB_HOST: localhost
          FALKORDB_PORT: 6581
        run: |
          # Create test config for graph backend
          cat > .kbconfig.test.yaml << EOF
          type: graph
          graph:
            connection:
              host: localhost
              port: 6581
              database: kb_test_graph
            vector_dimensions: 1536
            enable_temporal_queries: true
            enable_semantic_search: true
          EOF
          
          # Test graph backend initialization using TypeScript source
          npx tsx -e "
          async function test() {
            try {
              const { BackendManager } = await import('./src/core/backend-manager.js');
              const path = await import('path');
              
              const manager = new BackendManager(process.cwd());
              const configPath = path.join(process.cwd(), '.kbconfig.test.yaml');
              
              // Override config path for testing
              (manager as any).configPath = configPath;
              
              const result = await manager.initialize();
              if (!result.success) {
                console.error('Graph backend test failed:', result.error.message);
                process.exit(1);
              }
              console.log('✅ Graph backend connection successful');
              
              // Test backend switching
              const switchResult = await manager.switchBackend('filesystem');
              if (!switchResult.success) {
                console.error('Backend switching test failed:', switchResult.error.message);
                process.exit(1);
              }
              console.log('✅ Backend switching successful');
            } catch (e) {
              console.error('Test failed:', e.message);
              process.exit(1);
            }
          }
          test();
          "

      - name: Test KB CLI with graph backend
        env:
          FALKORDB_HOST: localhost
          FALKORDB_PORT: 6581
        run: |
          # Copy test config to default location
          cp .kbconfig.test.yaml .kbconfig.yaml
          
          # Test KB CLI commands with graph backend
          timeout 30s node dist/cli/index.js serve &
          sleep 5
          
          # Test that server started (will be running in background)
          if pgrep -f "dist/cli/index.js serve" > /dev/null; then
            echo "✅ KB serve with graph backend started successfully"
            pkill -f "dist/cli/index.js serve"
          else
            echo "❌ KB serve with graph backend failed to start"
            exit 1
          fi

  docker:
    name: Docker Build
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v4

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: moikascode/kb-mcp:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm moikascode/kb-mcp:test kb --version